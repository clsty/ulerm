#!/bin/bash
# vim:fileencoding=utf-8:ft=config:fdm=marker foldlevel=0
# @Author: clsty <ph-tyhu@outlook.com>
# @Title: ulerm: Unified Linux Environment Repo Manager
# @URL: https://github.com/clsty/ulerm
# @License: GNU GPL v3.0 License
#
# 注：使用 vim 时可以用 `za` 与 `zi` 切换折叠
# note: Use `za` or `zi` to toggle folding in vim.

# {{{ 初始化 - Initialize
author="clsty <ph-tyhu@outlook.com>"
project="https://github.com/clsty/ulerm"
set -e
## 定义函数 - Define Functions
function trycat { if test -f $1;then cat $1;fi; }
function catlocale { trycat .tempconf/locale.conf; }
function nofail { while true;do if "$@";then break;fi;done; }
function try { $@ || sleep 0; }

listnumprint(){
  list=($1);num=0
  for i in ${list[@]} ; do echo "${num}=$i";num=$(($num+1));done
}

# 定义颜色 - Define colors
cNM='\e[0m'  #NorMal (use at the end)
cCT='\e[31m' #CauTion
cNT='\e[33m' #NoTe
cHL='\e[36m' #HighLight
# 处理路径 - Process paths
selfpath="${BASH_SOURCE[0]}"
basedirshort="$(dirname $selfpath)"
cd "${basedirshort}"
basedir="$(pwd)"
basedirname="$(basename $basedir)"
mkdir -p .tempconf
# 判断发行版 id - Determine Linux Distro id
if ! [ -n "${distro_id}" ];then distro_id="$(lsb_release -is)";fi
case "$distro_id" in
  "Arch") source ./func_Arch;;
  #"Fedora") source ./func_Fedora;;
  *) echo -e "${cCT}ERROR: distro \"${distro_id}\" not supported.${cNM}";exit 1;;
esac
# }}}

# {{{ 确保就位 - Ensure in position
if ! test -f ../ready-ulerm; then
  mkdir ulerm
  find -maxdepth 1 -not -name ulerm -not -name . -exec mv {} ./ulerm/ \;
  echo '#!/bin/bash
  exec "$(dirname $0)"/ulerm/core' > ./ready-ulerm
  chmod +x ./ready-ulerm
  exec ./ulerm/core ; exit
else
  if [ "$basedirname" != "ulerm" ]; then
  echo -e "${cCT}The directory containing this script is ${cNT}\"$basedirname\"${cCT}. Please rename it to ${cNT}\"ulerm\"${cCT} manually (this script can't do it automatically for now).${cNM}"
  exit 1
  fi
fi
# }}}

# {{{ 定义帮助函数 - Define help function
showhelp(){
  case "$LANG" in
    "zh_CN.UTF-8")
echo -e "语法：$0 [选项]...
统一的 Linux 环境仓库管理器。作者：${cNT}$author${cNM}。项目地址：${cNT}$project${cNM}

若无指定选项，则运行默认的安装流程。

${cNT}通用${cNM}
${cNT}  -h, --help             ${cNM}显示此帮助信息
${cNT}      --listow=<文件>    ${cNM}显示指定 yaml<文件>的覆盖信息并退出
${cNT}      --listcr=<文件>    ${cNM}显示指定 yaml<文件>的创建信息并退出
${cNT}  -l, --lang=<lang>      ${cNM}选择语言环境，例如 --lang=zh_CN
${cNT}  -a, --ascii            ${cNM}ASCII 显示模式，强制以英文显示，即使其他语言已经通过 --lang 指定
${cNT}      --askow=y|n        ${cNM}在安装前提示(y)或不提示(n)确认覆盖信息（若不指定，则仅首次安装时提示）
${cNT}  -c                     ${cNM}相当于 --askow=y
${cNT}  -R, --reset            ${cNM}重置模式（删除 .tempconf）

${cNT}依赖预设${cNM}
${cNT}  -d, --deps             ${cNM}安装依赖（若不指定，则仅第一次时安装依赖）
${cNT}      --audio=<预设>     ${cNM}安装依赖时，也安装指定声卡的<预设>。当前发行版可用的<预设>：${cHL}${deps_audio_list[@]}${cNM}
${cNT}      --vga=<预设>       ${cNM}安装依赖时，也安装指定显卡的<预设>。当前发行版可用的<预设>：${cHL}${deps_vga_list[@]}${cNM}
${cNT}      --network=<预设>   ${cNM}安装依赖时，也安装指定网卡的<预设>。当前发行版可用的<预设>：${cHL}${deps_network_list[@]}${cNM}
${cNT}      --bluetooth=<预设> ${cNM}安装依赖时，也安装指定蓝牙的<预设>。当前发行版可用的<预设>：${cHL}${deps_bluetooth_list[@]}${cNM}
${cNT}      --trackpad=<预设>  ${cNM}安装依赖时，也安装指定触控板的<预设>。当前发行版可用的<预设>：${cHL}${deps_trackpad_list[@]}${cNM}
${cNT}      --touchscr=<预设>  ${cNM}安装依赖时，也安装指定触摸屏的<预设>。当前发行版可用的<预设>：${cHL}${deps_touchscr_list[@]}${cNM}

${cNT}uccr 相关${cNM}
${cNT}      --uccr=<预设>      ${cNM}指定 uccr<预设>。当前发行版可用的<预设>：${cHL}${uccr_list[@]}${cNM}
${cNT}      --uccrid=<值>      ${cNM}指定 uccrid 的值，格式要求与所指定的 uccr 有关。
${cNT}      --uccrpp=d|m|u|n   ${cNM}指定 uccr 的准备策略。
                               d 或 direct（默认）：当 ../uccr 存在时不进行准备。
                               m 或 move：当 ../uccr 存在时，将 ../uccr 重命名为 ../uccr-old-<时间> 再准备。
                               u 或 update：当 ../uccr 存在时对其进行升级。
                               n 或 no：不进行准备。"
  ;;
    *)
echo -e "Syntax: $0 [Options]...
Unified Linux Environment Repository Manager. Dev: ${cNT}$author${cNM} URL: ${cNT}$project${cNM}

If no option is specified, run default setup process.

${cNT}Generic${cNM}
${cNT}  -h, --help         ${cNM}Print this help message and exit
${cNT}      --listow=file  ${cNM}List the overwrite information of specified yaml <file> and exit
${cNT}      --listcr=file  ${cNM}List the create information of specified yaml <file> and exit
${cNT}  -l, --lang=<lang>  ${cNM}Select language environment, e.g. --lang=zh_CN
${cNT}  -a, --ascii        ${cNM}ASCII display mode, forcely display in English even if other language is specified with --lang
${cNT}      --askow=y|n    ${cNM}Prompt(y) or NOT prompt(n) for confirming overwriting information before installation (if not specified, then only prompt for first time installation)
${cNT}  -c                 ${cNM}Alias of --askow=y
${cNT}  -R, --reset        ${cNM}Reset mode (delete .tempconf)

${cNT}Dependencies Preset${cNM}
${cNT}  -d, --deps         ${cNM}Install dependencies (if not specified, then only install for first time installation)
${cNT}      --audio=<preset> ${cNM}Install audio <preset> when install dependencies. <preset> available for current distro: ${cHL}${deps_audio_list[@]}${cNM}
${cNT}      --vga=<preset> ${cNM}Install vga <preset> when install dependencies. <preset> available for current distro: ${cHL}${deps_vga_list[@]}${cNM}
${cNT}      --network=<preset> ${cNM}Install network <preset> when install dependencies. <preset> available for current distro: ${cHL}${deps_network_list[@]}${cNM}
${cNT}      --bluetooth=<preset> ${cNM}Install bluetooth <preset> when install dependencies. <preset> available for current distro: ${cHL}${deps_bluetooth_list[@]}${cNM}
${cNT}      --trackpad=<preset> ${cNM}Install trackpad <preset> when install dependencies. <preset> available for current distro: ${cHL}${deps_trackpad_list[@]}${cNM}
${cNT}      --touchscr=<preset> ${cNM}Install touch-screen <preset> when install dependencies. <preset> available for current distro: ${cHL}${deps_touchscr_list[@]}${cNM}

${cNT}uccr related${cNM}
${cNT}      --uccr=<preset>      ${cNM}指定 uccr<预设>。当前发行版可用的<预设>：${cHL}${uccr_list[@]}${cNM}
${cNT}      --uccrid=<value>      ${cNM}The value of uccrid, the format depends on specified uccr.
${cNT}      --uccrpp=d|m|u|n   ${cNM}The behavior of uccr preparation.
                               d or direct (default): When ../uccr exists, do NOT prepare.
                               m or move: When ../uccr exists, rename ../uccr to ../uccr-old-<date> then prepare.
                               u or update: When ../uccr exists, try update it.
                               n or no: Do NOT prepare."
  ;;
esac
}
# }}}

# {{{ getopt
para=$(getopt \
       -o Rahcld:q \
       -l dryrun,reset,listow:,listcr:,ascii,help,lang:,askow:,deps,audio:,vga:,network:,bluetooth:,trackpad:,touchscr:,uccr:,uccrid:,uccrpp: \
       -n "$0" -- "$@")
[ $? != 0 ] && echo "$0: Error when getopt, please recheck parameters." && exit 1
## getopt 第一阶段 - getopt Phase 1
# 无视参数顺序，先执行以下选项
# ignore parameter's order, execute options below first
eval set -- "$para"
while true ; do
  case "$1" in
    -h|--help) showhelp;exit;;
    --listow) listoverwrite $2;exit;;
    --listcr) listcreate $2;exit;;
    -R|--reset) rm -rf .tempconf/*; shift ;;
    --) break ;;
    *) shift ;;
  esac
done
## getopt 第二阶段 - getopt Phase 2
eval set -- "$para"
while true ; do
  case "$1" in
    # 第一阶段已处理的 - Already processed in phase 1
    -r|--reset) shift;;
    # 简单的 - Simple ones
    -a|--ascii) touch .tempconf/ascii;shift;;
    --dryrun)   dryrun=y;shift;; # 供调试使用
    -c)         askow=y;shift;;
    # 依赖设定相关 - Dependencies settings
    -d|--deps)  instdeps=y;shift;;
    --audio)    echo "$2">.tempconf/deps_audio;shift 2;;
    --vga)      echo "$2">.tempconf/deps_vga;shift 2;;
    --network)  echo "$2">.tempconf/deps_network;shift 2;;
    --bluetooth)echo "$2">.tempconf/deps_bluetooth;shift 2;;
    --trackpad) echo "$2">.tempconf/deps_trackpad;shift 2;;
    --uccr)     echo "$2">.tempconf/uccr;shift 2;;
    --uccrid)   echo "$2">.tempconf/uccrid;shift 2;;
    # 复杂的 - Complex ones
    --askow)
    case $2 in
      ""|"y") askow=y;;
      "n")    askow=n;;
      *)      echo -e "${cCT}Wrong argument for --askow${cNM}";exit 1;;
    esac; shift 2 ;;

    --uccrpp)
    case $2 in
      ""|"d"|"direct") prepareuccr=d;;
      "m"|"move")      prepareuccr=m;;
      "u"|"update")    prepareuccr=u;;
      "n"|"no")        prepareuccr=n;;
      *)      echo -e "${cCT}Wrong argument for --uccrpp${cNM}";exit 1;;
    esac; shift 2 ;;

    -l|--lang)
    case $2 in
      "zh_CN") echo zh_CN>.tempconf/locale.conf;;
      "en_US") echo en_US>.tempconf/locale.conf;;
      "") echo -e "${cCT}No argument for --lang${cNM}";exit 1;;
      *) echo -e "${cCT}Wrong argument for --lang${cNM}";exit 1;;
    esac;shift 2;;
    # 结尾处理 - Ending
    --) break ;;
    *) echo -e "$0: Wrong parameters.";exit 1;;
  esac
done
# }}}

# {{{ 显示语言与本地化 - Display language and Localization
## 当 .tempconf/ascii 存在时，采用 ascii 显示模式（即英语），否则使用 unicode
## When .tempconf/ascii exists, use ascii display mode(i.e. English only), else use unicode.
if test -f .tempconf/ascii; then rm .tempconf/ascii;dplang=ascii;else dplang=unicode;fi
## 仅当不存在符合标准的 locale.conf 时进行下一步的询问
## Prompt next only when no standard locale.conf exists
case "$(catlocale)" in
"zh_CN"|"en_US") sleep 0 ;;
*) while true;do
## 询问要使用的语言环境
## Prompt to ask what language environment to be used
case $dplang in
"ascii")
echo "
1=zh_CN: Simplified Chinese, including input method, font, etc
2=en_US: English"
;;
"unicode")
echo "
1=zh_CN: 简体中文，包括输入法、字体等
2=en_US: English"
;;
esac
read -p "Select a number: " p
case $p in
[1]) echo zh_CN > .tempconf/locale.conf ;break ;;
[2]) echo en_US > .tempconf/locale.conf ;break ;;
*) echo -e "Please enter the ${cCT}corresponding number${cNM}."
esac 
done ;; esac
## 在 ascii 显示模式下，一律将显示语言变为英语；否则与选择的语言环境一致
## When in ascii display mode, set display language to English, else set to the same as what choosed before.
if [ $dplang = ascii ];then dplang="en_US";else dplang="$(catlocale)";fi
## 定义多语言警告函数 - define multilingua warn function
warn_entering_num(){
  case $dplang in
    "zh_CN") echo -e "请输入一个${cCT}对应的整数${cNM}。";;
    "en_US") echo -e "Please enter the ${cCT}corresponding number${cNM}.";;
  esac
}
# }}}

# {{{ 初次安装时 - For first time installation
if ! test -f .tempconf/installed; then
  if ! [ -n ${askow} ];then askow=y;fi
  if ! [ -n ${instdeps} ];then instdeps=y;fi
fi
# }}}

# {{{ 预设依赖（声卡） - deps preset (audio)
ask_deps_audio(){
case $dplang in
  "zh_CN") echo -e "请选择一个要安装的声卡依赖预设（输入一个对应的整数）。";;
  "en_US") echo -e "Please specify a wanted audio deps preset (input the corresponding number).";;
esac
while true;do
  listnumprint "${deps_audio_list[*]}"
  read -p ": " n
  case $n in
    [0-$((num-1))]) echo ${deps_audio_list[$n]} > .tempconf/deps_audio ;break ;;
    *) warn_entering_num ;;
  esac
done
}
# 仅当 .tempconf/deps_audio 的内容不在 $deps_audio_list 中时进行询问。
# Prompt only when the content of .tempconf/deps_audio is NOT in the $deps_audio_list.
echo "${deps_audio_list[@]}"| grep -wq "$(trycat .tempconf/deps_audio)" || ask_deps_audio
# }}}

# {{{ 预设依赖（显卡） - deps preset (vga)
ask_deps_vga(){
case $dplang in
  "zh_CN") echo -e "请选择一个要安装的显卡依赖预设（输入一个对应的整数）。";;
  "en_US") echo -e "Please specify a wanted vga deps preset (input the corresponding number).";;
esac
while true;do
  listnumprint "${deps_vga_list[*]}"
  read -p ": " n
  case $n in
    [0-$((num-1))]) echo ${deps_vga_list[$n]} > .tempconf/deps_vga ;break ;;
    *) warn_entering_num ;;
  esac
done
}
# 仅当 .tempconf/deps_vga 的内容不在 $deps_vga_list 中时进行询问。
# Prompt only when the content of .tempconf/deps_vga is NOT in the $deps_vga_list.
echo "${deps_vga_list[@]}"| grep -wq "$(trycat .tempconf/deps_vga)" || ask_deps_vga
# }}}

# {{{ 预设依赖（网卡） - deps preset (network)
ask_deps_network(){
case $dplang in
  "zh_CN") echo -e "请选择一个要安装的网卡依赖预设（输入一个对应的整数）。";;
  "en_US") echo -e "Please specify a wanted network deps preset (input the corresponding number).";;
esac
while true;do
  listnumprint "${deps_network_list[*]}"
  read -p ": " n
  case $n in
    [0-$((num-1))]) echo ${deps_network_list[$n]} > .tempconf/deps_network ;break ;;
    *) warn_entering_num ;;
  esac
done
}
# 仅当 .tempconf/deps_network 的内容不在 $deps_network_list 中时进行询问。
# Prompt only when the content of .tempconf/deps_network is NOT in the $deps_network_list.
echo "${deps_network_list[@]}"| grep -wq "$(trycat .tempconf/deps_network)" || ask_deps_network
# }}}

# {{{ 预设依赖（蓝牙） - deps preset (bluetooth)
ask_deps_bluetooth(){
case $dplang in
  "zh_CN") echo -e "请选择一个要安装的蓝牙依赖预设（输入一个对应的整数）。";;
  "en_US") echo -e "Please specify a wanted bluetooth deps preset (input the corresponding number).";;
esac
while true;do
  listnumprint "${deps_bluetooth_list[*]}"
  read -p ": " n
  case $n in
    [0-$((num-1))]) echo ${deps_bluetooth_list[$n]} > .tempconf/deps_bluetooth ;break ;;
    *) warn_entering_num ;;
  esac
done
}
# 仅当 .tempconf/deps_bluetooth 的内容不在 $deps_bluetooth_list 中时进行询问。
# Prompt only when the content of .tempconf/deps_bluetooth is NOT in the $deps_bluetooth_list.
echo "${deps_bluetooth_list[@]}"| grep -wq "$(trycat .tempconf/deps_bluetooth)" || ask_deps_bluetooth
# }}}

# {{{ 预设依赖（触控板） - deps preset (trackpad)
ask_deps_trackpad(){
case $dplang in
  "zh_CN") echo -e "请选择一个要安装的触控板依赖预设（输入一个对应的整数）。";;
  "en_US") echo -e "Please specify a wanted trackpad deps preset (input the corresponding number).";;
esac
while true;do
  listnumprint "${deps_trackpad_list[*]}"
  read -p ": " n
  case $n in
    [0-$((num-1))]) echo ${deps_trackpad_list[$n]} > .tempconf/deps_trackpad ;break ;;
    *) warn_entering_num ;;
  esac
done
}
# 仅当 .tempconf/deps_trackpad 的内容不在 $deps_trackpad_list 中时进行询问。
# Prompt only when the content of .tempconf/deps_trackpad is NOT in the $deps_trackpad_list.
echo "${deps_trackpad_list[@]}"| grep -wq "$(trycat .tempconf/deps_trackpad)" || ask_deps_trackpad
# }}}

# {{{ 预设依赖（触摸屏） - deps preset (touchscr)
ask_deps_touchscr(){
case $dplang in
  "zh_CN") echo -e "请选择一个要安装的触摸屏依赖预设（输入一个对应的整数）。";;
  "en_US") echo -e "Please specify a wanted touchscr deps preset (input the corresponding number).";;
esac
while true;do
  listnumprint "${deps_touchscr_list[*]}"
  read -p ": " n
  case $n in
    [0-$((num-1))]) echo ${deps_touchscr_list[$n]} > .tempconf/deps_touchscr ;break ;;
    *) warn_entering_num ;;
  esac
done
}
# 仅当 .tempconf/deps_touchscr 的内容不在 $deps_touchscr_list 中时进行询问。
# Prompt only when the content of .tempconf/deps_touchscr is NOT in the $deps_touchscr_list.
echo "${deps_touchscr_list[@]}"| grep -wq "$(trycat .tempconf/deps_touchscr)" || ask_deps_touchscr
# }}}

# {{{ 安装所选依赖 - Install selected dependencies
case $instdeps in "y")
deps_basic
deps_vga       $(trycat .tempconf/deps_vga)
deps_audio     $(trycat .tempconf/deps_audio)
deps_network   $(trycat .tempconf/deps_network)
deps_bluetooth $(trycat .tempconf/deps_bluetooth)
deps_trackpad  $(trycat .tempconf/deps_trackpad)
deps_touchscr  $(trycat .tempconf/deps_touchscr)
deps_end
;;esac
# }}}

# {{{ 选择 uccr - select uccr
ask_uccr(){
case $dplang in
  "zh_CN") echo -e "请选择一个要安装的 uccr 预设（输入一个对应的整数）。";;
  "en_US") echo -e "Please specify a wanted uccr preset (input the corresponding number).";;
esac
while true;do
  listnumprint "${uccr_list[*]}"
  read -p ": " n
  case $n in
    [0-$((num-1))]) echo ${uccr_list[$n]} > .tempconf/uccr ;break ;;
    *) warn_entering_num ;;
  esac
done
}
# 仅当 ../uccr/uccr-sync 不存在，且 .tempconf/uccr 的内容不在 $uccr_list 中时进行询问。
# Prompt only when ../uccr/uccr-sync does NOT exists and the content of .tempconf/uccr is NOT in the $uccr_list.
if ! test -f ../uccr/uccr-sync;then
  echo "${uccr_list[@]}"| grep -wq "$(trycat .tempconf/uccr)" || ask_uccr
fi
# }}}

# {{{ 准备 UCCR - Prepare UCCR
known=y; echo "${uccr_list[@]}"| grep -wq "$(trycat .tempconf/uccr)" || known=n
if [ $known = y ] ;then
  case $prepareuccr in
    ""|"d") if [ ! -d "../uccr/" ];then uccr_prepare $uccr $uccr-id;fi ;;
    "m") if [ -d "../uccr/" ];then mv ../uccr ../uccr-old-$(date);fi
    uccr_prepare $uccr $uccr-id ;;
    "u") uccr_prepare $uccr $uccr-id ;;
  esac
else
  case "$dplang" in
    "zh_CN")echo -e "${cCT}警告：指定的 uccr ${cNT}\"$(trycat .tempconf/uccr)\"${cCT} 不在 uccr 列表中，对 uccr 的准备将被忽略。${cNM}";;
    *)echo -e "${cCT}WARNING: The specified uccr ${cNT}\"$(trycat .tempconf/uccr)\"${cCT} is not in the uccr list, uccr preparation will be ignored.${cNM}";;
  esac
  sleep 3
fi
# }}}

# {{{ 同步 UCCR - Sync UCCR
# 未指定 --dryrun 时才执行 - execute only without --dryrun
if ! [ "y$dryrun" = "yy" ]; then
  ../uccr/uccr-sync
fi
# }}}

# {{{ 完成安装 - Installation finished
touch ${basedir}/.tempconf/installed
case "$dplang" in
  "zh_CN") echo -e "${cNT}本次安装已全部完成。${cNM}";;
  "en_US") echo -e "${cNT}The installation process has finished.${cNM}";;
esac
# }}}
